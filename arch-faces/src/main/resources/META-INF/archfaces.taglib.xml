<?xml version="1.0"?>
<!DOCTYPE facelet-taglib PUBLIC
        "-//Sun Microsystems, Inc.//DTD Facelet Taglib 1.0//EN"
        "http://java.sun.com/dtd/facelet-taglib_1_0.dtd">
<facelet-taglib xmlns="http://java.sun.com/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-facelettaglibrary_2_0.xsd"
                version="2.0">
  <namespace>http://kmware.com/faces</namespace>


  <tag>
    <tag-name>panelGridCell</tag-name>
    <component>
      <component-type>com.kmware.component.logical.PanelGridCell</component-type>
    </component>
  </tag>






    <!--            USELESS TAGS JUST CC            -->

    <tag>
        <description>
            Renders an HTML "table" element, conforming to the
            rules in the HTML 401 specification. Render the "caption" facet,
            if present, inside a "caption" element immediately below the "table"
            element.
            If the "captionClass" attribute is specified, render its value as
            the value
            of the "class" attribute on the "caption" element. If the
            "captionStyle" attribute
            is specified, render its value as the value of the "style" attribute
            on the "caption" element. If the "styleClass" attribute is
            specified, render
            its value as the value of the "class" attribute. Render the
            pass-through
            attributes in the table below. Render the "header" facet, if
            present, inside of
            "thead", "tr", and "th" elements, nested in that order. If the
            "headerClass" attribute is specifed, render its value as the value
            of the "class" attribute on the "th" element. Render "colgroup"
            as the value of the "scope" attribute. Render the value of the
            "columns" attribute as the value of the "colspan" attribute on the
            "th" element. Render the "footer" facet if present, using similar
            logic to the rendering of the "header", but replacing "thead" with
            "tfoot", "th" with "td", and "headerClass" with "footerClass".
            Render the children of the &lt;code&gt;UIPanel&lt;/code&gt;
            component inside
            of a "tbody" element. Render the children based on the value of
            the "columns" attribute, creating a new row each time a "columns"
            worth of children have been rendered. For the start of each row,
            render a "tr" element. Output the value of the "rowClasses" per
            the attribute description below. For each child, output a "td"
            element, attaching the value of the "columnClasses" attribute per
            the attribute description below. Recursively encode each child.
            Close out the "td" element. When done with the row, close out the
            "tr" element. If a child has "rendered==false" it is not rendered,
            and the column counter must not be incremented.
        </description>
        <tag-name>panelGrid</tag-name>
        <component>
            <component-type>com.kmware.component.panel.PanelGrid</component-type>
            <renderer-type>javax.faces.Grid</renderer-type>
        </component>
        <attribute>
            <description>
                The component identifier for this component. This value must be
                unique within the closest parent component that is a naming
                container.
            </description>
            <name>id</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Flag indicating whether or not this component should be rendered
                (during Render Response Phase), or processed on any subsequent
                form submit. The default value for this property is true.
            </description>
            <name>rendered</name>
            <required>false</required>
            <type>boolean</type>
        </attribute>
        <attribute>
            <description>
                Name or code of the background color for this table.
            </description>
            <name>bgcolor</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Comma separated list of row indices for which a new
                "tbody" element should be started (and any
                previously opened one should be ended).
            </description>
            <name>bodyrows</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Width (in pixels) of the border to be drawn
                around this table.
            </description>
            <name>border</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) that will be
                applied to any caption generated for this table.
            </description>
            <name>captionClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this caption is rendered.
            </description>
            <name>captionStyle</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Definition of how much space the user agent should
                leave between the border of each cell and its contents.
            </description>
            <name>cellpadding</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Definition of how much space the user agent should
                leave between the left side of the table and the
                leftmost column, the top of the table and the top of
                the top side of the topmost row, and so on for the
                right and bottom of the table. It also specifies
                the amount of space to leave between cells.
            </description>
            <name>cellspacing</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Comma-delimited list of CSS style classes that will be applied
                to the columns of this table. A space separated list of
                classes may also be specified for any individual column. If
                the number of elements in this list is less than the number of
                actual column children of the UIData, no "class"
                attribute is output for each column greater than the number of
                elements in the list. If the number of elements in the list
                is greater than the number of actual column children of the
                UIData, the elements at the posisiton in the list
                after the last column are ignored.
            </description>
            <name>columnClasses</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The number of columns to render before
                starting a new row.
            </description>
            <name>columns</name>
            <required>false</required>
            <type>int</type>
        </attribute>
        <attribute>
            <description>
                Direction indication for text that does not inherit
                directionality.
                Valid values are "LTR" (left-to-right) and "RTL"
                (right-to-left).
            </description>
            <name>dir</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) that will be
                applied to any footer generated for this table.
            </description>
            <name>footerClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code specifying which sides of the frame surrounding
                this table will be visible. Valid values are:
                none (no sides, default value); above (top side only);
                below (bottom side only); hsides (top and bottom sides
                only); vsides (right and left sides only); lhs (left
                hand side only); rhs (right hand side only); box
                (all four sides); and border (all four sides).
            </description>
            <name>frame</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) that will be
                applied to any header generated for this table.
            </description>
            <name>headerClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code describing the language used in the generated markup
                for this component.
            </description>
            <name>lang</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                clicked over this element.
            </description>
            <name>onclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                double clicked over this element.
            </description>
            <name>ondblclick</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed down over this element.
            </description>
            <name>onkeydown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                pressed and released over this element.
            </description>
            <name>onkeypress</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a key is
                released over this element.
            </description>
            <name>onkeyup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                pressed down over this element.
            </description>
            <name>onmousedown</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved within this element.
            </description>
            <name>onmousemove</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved away from this element.
            </description>
            <name>onmouseout</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                moved onto this element.
            </description>
            <name>onmouseover</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Javascript code executed when a pointer button is
                released over this element.
            </description>
            <name>onmouseup</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Comma-delimited list of CSS style classes that will be applied
                to the rows of this table. A space separated list of classes
                may also be specified for any individual row. Thes styles are
                applied, in turn, to each row in the table. For example, if
                the list has two elements, the first style class in the list
                is applied to the first row, the second to the second row, the
                first to the third row, the second to the fourth row, etc. In
                other words, we keep iterating through the list until we reach
                the end, and then we start at the beginning again.
            </description>
            <name>rowClasses</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Code specifying which rules will appear between cells
                within this table. Valid values are: none (no rules,
                default value); groups (between row groups); rows
                (between rows only); cols (between columns only); and
                all (between all rows and columns).
            </description>
            <name>rules</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                CSS style(s) to be applied when this component is rendered.
            </description>
            <name>style</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Space-separated list of CSS style class(es) to be applied when
                this element is rendered. This value must be passed through
                as the "class" attribute on generated markup.
            </description>
            <name>styleClass</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Summary of this table's purpose and structure, for
                user agents rendering to non-visual media such as
                speech and Braille.
            </description>
            <name>summary</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Advisory title information about markup elements generated
                for this component.
            </description>
            <name>title</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                Width of the entire table, for visual user agents.
            </description>
            <name>width</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>
                The ValueExpression linking this component to a property in a
                backing bean
            </description>
            <name>binding</name>
            <required>false</required>
            <type>javax.faces.component.UIComponent</type>
        </attribute>
    </tag>


</facelet-taglib>
